MagicEnum
=========

Method used to define ENUM attributes in your model. Examples:
 
   Statuses = {
     :draft => 0,
     :published => 1,
     :approved => 2
   }
   define_enum :status
 
Before using <tt>define_enum</tt>, you should define constant with ENUM options.
Constant name would be pluralized enum attribute name. Additional constant named
like <tt>YourEnumInverted</tt> would be created automatically and would contain
inverted hash.
 
<b>Please note</b>: <tt>nil</tt> and <tt>0</tt> are not the same values!
 
You could specify additional options:

 * <tt>:default</tt> - value which will be used when current state of ENUM attribute is
   invalid or wrong value received. If it has not been specified, min value of the ENUM would
   be used.
 * <tt>:raise_on_invalid</tt> - if <tt>true</tt> an exception would be raised on invalid
   enum value received. If it is <tt>false</tt>, default value would be used instead of
   wrong one.
 * <tt>:simple_accessors</tt> - if <tt>true</tt>, additional methods for each ENUM value
   would be defined in form <tt>value?</tt>. Methods returns <tt>true</tt> when
   ENUM attribute has corresponding value.
 * <tt>:enum</tt> - string with name of the ENUM hash.
 
Look the following example:
 
   Statuses = {
     :unknown => 0,
     :draft => 1,
     :published => 2,
     :approved => 3
   }
   define_enum :status, :default => 1, :raise_on_invalid => true, :simple_accessors => true
   
This example is identical to:
 
   Statuses = {
     :unknown => 0,
     :draft => 1,
     :published => 2,
     :approved => 3
   }
   StatusesInverted = Statuses.invert
   
   def status
     return StatusesInverted[self[:status].to_i] || StatusesInverted[1]
   end
   
   def status=(value)
     raise ArgumentError, "Invalid value \"#{value}\" for :status attribute of the #{self.class} model" if Statuses[value].nil?
     self[:status] = Statuses[value]
   end
   
   def unknown?
     status == :unknown
   end
   
   def draft?
     status == :draft
   end
   
   def published?
     status == :published
   end
   
   def approved?
     status == :approved
   end
